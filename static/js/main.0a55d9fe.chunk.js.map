{"version":3,"sources":["components/Editor/Editor.tsx","components/Preview/Preview.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["StyledWrapper","styled","div","_templateObject","StyledTextArea","textarea","_templateObject2","Editor","_this$props","this","props","onChange","markdown","react_default","a","createElement","value","name","id","PureComponent","StyledPreview","Preview_templateObject","marked","setOptions","breaks","renderer","Renderer","renderMarkdown","Preview","className","dangerouslySetInnerHTML","__html","Component","StyledMarkdownPreviewer","App_templateObject","App","state","handleOnChange","e","_this","setState","currentTarget","Editor_Editor","Preview_Preview","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qmBAGA,IAAMA,EAAgBC,IAAOC,IAAVC,KAMbC,EAAiBH,IAAOI,SAAVC,KAcCC,mLACR,IAAAC,EACsBC,KAAKC,MAA3BC,EADAH,EACAG,SAAUC,EADVJ,EACUI,SACjB,OACEC,EAAAC,EAAAC,cAACf,EAAD,KACEa,EAAAC,EAAAC,cAAA,oBACEF,EAAAC,EAAAC,cAACX,EAAD,CAAgBY,MAAOJ,EAAUD,SAAUA,EAAUM,KAAK,SAASC,GAAG,mBAN9CC,2SCjBpC,IAAMC,EAAgBnB,IAAOC,IAAVmB,KAUnBC,IAAOC,WAAW,CACdC,QAAQ,IAEZ,IAAMC,EAAW,IAAIH,IAAOI,SAEtBC,EAAiB,SAACf,GACpB,OAAOU,IAAOV,EAAU,CAAEa,SAAUA,KAGnBG,mLAER,IACEhB,EAAYH,KAAKC,MAAjBE,SACP,OACIC,EAAAC,EAAAC,cAACK,EAAD,CAAeS,UAAU,iBACrBhB,EAAAC,EAAAC,cAAA,OAAKG,GAAG,UAAUY,wBAAyB,CAACC,OAAQJ,EAAef,cAN9CoB,mICpBrC,IAAMC,EAA0BhC,IAAOC,IAAVgC,KAsEdC,6MA/DbC,MAAQ,CACNxB,SAAQ,qrCAgDVyB,eAAiB,SAACC,GAChBC,EAAKC,SAAS,CAAC5B,SAAU0B,EAAEG,cAAczB,iFAIzC,OACEH,EAAAC,EAAAC,cAACkB,EAAD,CAAyBJ,UAAU,OACnChB,EAAAC,EAAAC,cAAC2B,EAAD,CAAQ9B,SAAUH,KAAK2B,MAAMxB,SAAUD,SAAUF,KAAK4B,iBACtDxB,EAAAC,EAAAC,cAAC4B,EAAD,CAAS/B,SAAUH,KAAK2B,MAAMxB,mBA1DlBoB,aCCEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0a55d9fe.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport styled from 'styled-components';\n\nconst StyledWrapper = styled.div`\nflex: 1;\nwidth: 100%;\npadding-right: 4px;\n`;\n\nconst StyledTextArea = styled.textarea`\n  height: 100%;\n  width: 100%;\n  border: none;\n  padding: 45px 45px 0;\n  padding-right: 0;\n  margin-right: 45px;\n  font-size: 1em;\n  \n  &:focus {\n    outline: none;\n  }\n`;\n\nexport default class Editor extends PureComponent<any> {\n    render() {\n      const {onChange, markdown} = this.props;\n      return (\n        <StyledWrapper>\n          <h1>Editor</h1>\n            <StyledTextArea value={markdown} onChange={onChange} name=\"editor\" id=\"editor\"></StyledTextArea>\n        </StyledWrapper>\n      );\n    }\n}","import React, { PureComponent, Component } from 'react';\nimport marked from 'marked';\nimport { render } from 'react-dom';\nimport styled from 'styled-components';\nimport 'github-markdown-css/github-markdown.css';\n\nconst StyledPreview = styled.div`\n\t\tbox-sizing: border-box;\n\t\tmin-width: 200px;\n\t\tmax-width: 980px;\n\t\tmargin: 0 auto;\n        padding: 45px;\n        flex: 1;\n        border-left: 2px solid mediumaquamarine;\n`;\n\nmarked.setOptions({\n    breaks: true,\n});\nconst renderer = new marked.Renderer();\n\nconst renderMarkdown = (markdown:any):string => {\n    return marked(markdown, { renderer: renderer })\n}\n\nexport default class Preview extends Component<any> {\n\n    render() {\n        const {markdown} = this.props;\n        return (\n            <StyledPreview className=\"markdown-body\">\n                <div id=\"preview\" dangerouslySetInnerHTML={{__html: renderMarkdown(markdown)}}></div>\n            </StyledPreview>\n        )\n    }\n}","import React, { Component, SyntheticEvent } from 'react';\nimport Editor from './components/Editor/Editor';\nimport Preview from './components/Preview/Preview';\nimport styled from 'styled-components';\n\nconst StyledMarkdownPreviewer = styled.div`\ndisplay: flex;\nheight: 100vh;\nwidth: 100vw;\n`;\n\nclass App extends Component {\n  state = {\n    markdown: `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n    `\n  }\n\n  handleOnChange = (e: React.FormEvent<HTMLInputElement>) => {\n    this.setState({markdown: e.currentTarget.value})\n  }\n\n  render() {\n    return (\n      <StyledMarkdownPreviewer className=\"App\">\n      <Editor markdown={this.state.markdown} onChange={this.handleOnChange}/>\n      <Preview markdown={this.state.markdown}/>\n      </StyledMarkdownPreviewer>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}